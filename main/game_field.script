colors = {
	red = vmath.vector4(1.0, 0.0, 0.0, 1.0),
	orange = vmath.vector4(1.0, 0.647, 0.0, 1.0),
	yellow = vmath.vector4(1.0, 1.0, 0.0, 1.0),
	green = vmath.vector4(0.0, 1.0, 0.0, 1.0),
	skyblue = vmath.vector4(0.2588, 0.6666, 1.0, 1.0),
	blue = vmath.vector4(0.0, 0.0, 1.0, 1.0),
	violet = vmath.vector4(0.545, 0.0, 1.0, 1.0),
	white = vmath.vector4(1.0, 1.0, 1.0, 1.0),
	black = vmath.vector4(0.0, 0.0, 0.0, 1.0)
}

const = {
	screen_size = vmath.vector3(),
	screen_center = vmath.vector3(),
	cell_size = 128,
	angles = { -- 0N, 1E, 2S, 3W
		vmath.quat(0, 0, 0, 1),
		vmath.quat(0, 0, -0.70710676908493, 0.70710676908493),
		vmath.quat(0, 0, 1, 0),
		vmath.quat(0, 0, 0.70710676908493, 0.70710676908493)
	},
	celltype = {
		i = {true, false, false, false}, -- only 1 connection
		ii = {false, true, false, true}, -- link WE
		ix = {true, true, true, true}, -- link WE and NS
		l = {true, true, false, false}, -- link NE
		ll = {true, true, true, true}, -- link NE and WS
		t = {true, true, false, true}, -- link NWE
		tr = {true, true, false, true}, -- link WE if N under power
		x = {true, true, true, true}, -- link NWSE
	}
}

vals = {
	cell_field = {},
	game_field = {},
	player_pos = {}
}

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	do -- get size of screen and center position
		local size_arr = { window.get_size() }
		const.screen_size = vmath.vector3(size_arr[1], size_arr[2], 0)
		const.screen_center =  const.screen_size/2
	end

	local field_desc = {
		{"0+l", "0+ii", "0+t", "0+x"},
		{"2+t", "3+l", "2-ii", "3+t"},
		{"2+ii", "1-t", "2+t", "0-ii"},
		start = {2,1},
		ignite = {
			{2,3, colors.red},
			{1,4, colors.yellow}
		}
			
	}
	
	-- evaluate field top left
	local top_left_x = const.screen_center.x - const.cell_size * (#field_desc[1]/2 - 0.5)
	local top_left_y = const.screen_center.y + const.cell_size * (#field_desc/2 - 0.5)
	local top_left = vmath.vector3(top_left_x, top_left_y, 0)
	-- spawn field objects
	for i = 1, #field_desc do
		vals.cell_field[i] = {}
		vals.game_field[i] = {} -- turnability
		for j = 1, #field_desc[1] do
			local pos_code = field_desc[i][j]
			local turn = tonumber(pos_code:sub(1,1))
			vals.game_field[i][j] = pos_code:sub(2,2) == "+"
			local url = msg.url("/spawner#type_" .. pos_code:sub(3))
			local pos = vmath.vector3(top_left.x + const.cell_size * (j-1), top_left.y - const.cell_size * (i-1) , 0)
			vals.cell_field[i][j] = factory.create(url, pos, const.angles[turn], nil, 0.5)
		end
	end
	-- spawn player
	vals.player_pos[1], vals.player_pos[2] = field_desc.start[1], field_desc.start[2]
	local start_cell_url = vals.cell_field[ vals.player_pos[1] ][ vals.player_pos[2] ]
	local player_start = go.get_position(start_cell_url)
	player_start.z = player_start.z + 0.01
	go.set_position(player_start, "/player")
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		print("Touch!")
	end
end